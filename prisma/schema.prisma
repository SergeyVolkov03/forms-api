// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int     @default(autoincrement()) @id
  email               String  @unique
  name                String
  password            String
  is_blocked          Boolean @default(false)
  is_admin            Boolean @default(false)
  last_time_at        DateTime
  templates           Template[] @relation("TemplateAuthor")
  likes               Like[]
  fillable_templates  Template[] @relation("TemplateFillers")
  forms Form[]
}

model Template{
  id            Int       @default(autoincrement()) @id
  author        User      @relation(fields: [author_id], references: [id], onDelete: Cascade, name: "TemplateAuthor")
  author_id     Int
  title         String?
  description   String?
  topic         Topic     @relation(fields: [topic_id], references: [id])
  topic_id      Int
  image         String?
  is_public     Boolean   @default(true)
  fillers       User[]    @relation(name: "TemplateFillers")
  questions     Question[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt
  comments      Comment[]
  likes         Like[]
  tags          Tag[]
  forms         Form[]
}

model Topic{
  id            Int    @default(autoincrement()) @id
  name          String
  templates     Template[]
}

enum QuestionType {
  SHORT_TEXT
  LONG_TEXT
  NUMBER
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model Question {
  id              Int     @id @default(autoincrement())
  order           Int
  title           String?
  description     String?
  is_displayed    Boolean  @default(true)
  type            QuestionType
  template        Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id     Int
  answer_options  AnswerOption[]
  answers         Answer[]
}

model AnswerOption {
  id             Int    @id @default(autoincrement())
  value          String
  question_id    Int
  question       Question   @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model Comment {
  id             Int      @id @default(autoincrement())
  content        String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  template_id    Int
  template       Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
}

model Like {
  id           Int       @id @default(autoincrement())
  user_id      Int
  template_id  Int
  created_at   DateTime  @default(now())
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  template     Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  templates   Template[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
}

model Answer {
  id          Int       @id @default(autoincrement())
  form        Form      @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id     Int
  question    Question  @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id Int
  value       String[]
  createdAt   DateTime  @default(now())
  @@unique([form_id, question_id], name: "form_id_question_id")
}

model Form {
  id          Int       @id @default(autoincrement())
  template    Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id Int
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  answers     Answer[]
  createdAt   DateTime  @default(now())
}